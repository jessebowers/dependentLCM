% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependentLCM.r
\name{dependentLCM_fit}
\alias{dependentLCM_fit}
\title{Fits a bayesian dependent LCM model}
\usage{
dependentLCM_fit(
  nitr,
  df = NULL,
  mat = NULL,
  nclass = NCLASS,
  ndomains = NULL,
  class2domain = NULL,
  classPi_alpha = CLASSPI_ALPHA,
  domain_alpha = NULL,
  domain_maxitems = NULL,
  theta_alpha = THETA_ALPHA,
  domain_proposal_empty = DOMAIN_PROPOSAL_EMPTY,
  domain_proposal_swap = DOMAIN_PROPOSAL_SWAP,
  domain_nproposals = NULL,
  steps_active = STEPS_ACTIVE,
  theta_alpha_funname = THETA_ALPHA_FUNNAME,
  class_pi = NULL,
  classes = NULL,
  domains = NULL,
  class_init_method = "kmodes"
)
}
\arguments{
\item{nitr}{integer. Number of iterations to run the bayes MCMC}

\item{df}{dataframe. Raw data you are fitting with all assumed to be factors}

\item{mat}{matrix. The data you wish to analyze}

\item{nclass}{integer. Number of subject latent classes}

\item{ndomains}{integer. Number of item domains}

\item{class2domain}{integer vector of length nclass. Classes with same value have same domains.}

\item{classPi_alpha}{numeric vector. Bayes hyperparameter giving prior for Pi.}

\item{domain_alpha}{numeric. Bayes hyperparameter giving prior for domains.}

\item{domain_maxitems}{iinteger. Maximum number of items which can be in a doamin.}

\item{theta_alpha}{numeric. Bayes hyperparemter giving the prior for theta/probabilties.}

\item{domain_proposal_empty}{numeric. Sets how often the domain metropolis proposal function pairs a nonempty domain with an empty domain.}

\item{domain_proposal_swap}{numeric. Sets how often the domain metropolis proposal function swaps items between domains.}

\item{domain_nproposals}{Sets how many times the domain metropolis propsal function is called each iteration}

\item{steps_active}{Named boolean vector of what actions to take during mcmc. If mcmc is skipped then initial values are kept as fixed.
thetas=TRUE to do gibbs on response probabilities, domains=TRUE to do metropolis on domains, class_pi=TRUE to do gibbs on class prior, classes=TRUE to do gibbs on class membership, identifiable=TRUE to check generic identifiability conditions of domains}

\item{theta_alpha_funname}{Decides the prior for theta as domains get merged. 
"constant" for theta~Dirichlet(rep(theta_alpha, size))
"linear" for theta~Dirichlet(rep(2*theta_alpha/size, size))
"log" for theta~Dirichlet(rep(log(2)*theta_alpha/log(size), size))}

\item{class_pi}{numeric vector size nclass. Initial condition for bayes parameter pi.}

\item{classes}{integer vector size nrow(df). Initial condition for subject classes.}

\item{domains}{list. Initial values for domains/probabilites.}

\item{class_init_method}{string. Decides how 'classes' is defaulted if NULL. One of "kmodes" or "random" or "random_centers"}

\item{cleanup}{boolean. TRUE to delete some redundant data from output}
}
\description{
Fits a bayesian dependent LCM model
}
