// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dependentLCM_fit_cpp
Rcpp::List dependentLCM_fit_cpp(Rcpp::IntegerMatrix& x_in, Rcpp::List hparams_list, Rcpp::List params_list);
RcppExport SEXP _dependentLCM_dependentLCM_fit_cpp(SEXP x_inSEXP, SEXP hparams_listSEXP, SEXP params_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x_in(x_inSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hparams_list(hparams_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params_list(params_listSEXP);
    rcpp_result_gen = Rcpp::wrap(dependentLCM_fit_cpp(x_in, hparams_list, params_list));
    return rcpp_result_gen;
END_RCPP
}
// id2pattern
Rcpp::IntegerMatrix id2pattern(const Rcpp::IntegerVector& xpattern, const Rcpp::IntegerVector& mapvec);
RcppExport SEXP _dependentLCM_id2pattern(SEXP xpatternSEXP, SEXP mapvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type xpattern(xpatternSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type mapvec(mapvecSEXP);
    rcpp_result_gen = Rcpp::wrap(id2pattern(xpattern, mapvec));
    return rcpp_result_gen;
END_RCPP
}
// itemid2patterns
Rcpp::IntegerVector itemid2patterns(const Rcpp::IntegerVector& pattern_ids, const Rcpp::IntegerVector& items_ids, const Rcpp::IntegerVector& item_nlevels);
RcppExport SEXP _dependentLCM_itemid2patterns(SEXP pattern_idsSEXP, SEXP items_idsSEXP, SEXP item_nlevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type pattern_ids(pattern_idsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type items_ids(items_idsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type item_nlevels(item_nlevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(itemid2patterns(pattern_ids, items_ids, item_nlevels));
    return rcpp_result_gen;
END_RCPP
}
// expSumLog
double expSumLog(const Rcpp::NumericVector& x);
RcppExport SEXP _dependentLCM_expSumLog(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expSumLog(x));
    return rcpp_result_gen;
END_RCPP
}
// is_identifiable_r
bool is_identifiable_r(const Rcpp::IntegerMatrix& item2domainid, int nclass, const Rcpp::IntegerVector& item_nlevels);
RcppExport SEXP _dependentLCM_is_identifiable_r(SEXP item2domainidSEXP, SEXP nclassSEXP, SEXP item_nlevelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type item2domainid(item2domainidSEXP);
    Rcpp::traits::input_parameter< int >::type nclass(nclassSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type item_nlevels(item_nlevelsSEXP);
    rcpp_result_gen = Rcpp::wrap(is_identifiable_r(item2domainid, nclass, item_nlevels));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dependentLCM_dependentLCM_fit_cpp", (DL_FUNC) &_dependentLCM_dependentLCM_fit_cpp, 3},
    {"_dependentLCM_id2pattern", (DL_FUNC) &_dependentLCM_id2pattern, 2},
    {"_dependentLCM_itemid2patterns", (DL_FUNC) &_dependentLCM_itemid2patterns, 3},
    {"_dependentLCM_expSumLog", (DL_FUNC) &_dependentLCM_expSumLog, 1},
    {"_dependentLCM_is_identifiable_r", (DL_FUNC) &_dependentLCM_is_identifiable_r, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_dependentLCM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
