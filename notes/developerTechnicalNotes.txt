

###################
################### Action Items
###################


OPEN ITEMS:
 * Update class update when collapsing on thetas. Set the counts to update incrementally and remove likelihood_collapsed matrix
 * Update fix_class_label_switching() to allow dlcm$hparams$save_itrs["all"] < dlcm$hparams$nitr.

FUTURE ENHANCEMENTS:
 * The metropolis proposal is not optimized for domainPriorKnowledgeLog_mat, especially extreme values of it. 
 * Allow domainPriorKnowledgeLog_mat to vary in the heterogeneous DLCM
 * In some cases there may be hyperparameters specific to a class (partially heterogeneous DLCM, heterogeneous domainPriorKnowledgeLog_mat). There can be a label swapping problem here where the incorrect observations are assigned an inappropriate hyperparameter value. Fix by adding a label swapping step in your MCMC.
 * Find more transparent way of doing domain prior. Right now (for "restrictive") the domain prior is split across two functions. Maybe put BayesParameter::domain_prior() into DomainCount::getloglik_marginal(). But be careful since DomainCount::getloglik_marginal() is executed once per class even for homogeneous.
 * Make prior domain_theta_prior_type="restrictive" more clear in implementation.
 * allow multiple chains
 * allow with/without parallel for single chain 
 * Allow saving of sufficient statistics instead of values iteration by iteration (inspiration: arma::running_stat)
 * Incorporate optional checks/consistency checks eg domain size, nclasses, etc
 * Maybe remove unnecessary functions in cpp (e.g. lchoose)
 * For domain split action, use reduce_items function twice. Use dropItem for faster counting. Tried this in dropItemSpeedup branch but was not faster in practice. There should be an implementation which is faster. One idea is to change domains from a map of domains to a map of pointers to domains. Then in Bayes.domainCounts have an option just to count the empty domains. You would need to create a new map of just the empty domains then proceed as usual (where updating the new map updates the old).
 * Run devtools::check() and fix identified issues
 * Maybe make 'get pooled domains' an exportable function? Do we care?
 * allow pre-specified structual zeroes
 * allow restricted latent class model


###################
################### Installing Package
###################


# Directly from GitHub
library(Rcpp)
library(devtools)
devtools::install_github(repo="jessebowers/dependentLCM", ref="main"
                         , auth_token="<NEED IF PRIVATE>"
                         )

# Indirectly from GitHub
# Download files: git clone git@github.com:jessebowers/dependentLCM.git
devtools::install("~/dependentLCM")
devtools::install("./dependentLCM", upgrade="never")


# Use package without installing
library(Rcpp)
library(klaR)
library(abind)
library(dplyr)
package_dir <- "~/dependentLCM"
sourceCpp(paste(package_dir, "src/dependentLCM.cpp", sep="/"))
source(paste(package_dir, "R/dependentLCM.r", sep="/"))


###################
################### Build Package from scratch
###################


# [MANUAL] Set locations of files
r_file_loc <- "~/dependentLCM.r"
cpp_file_loc <- "~/dependentLCM.cpp"
new_package_dir <- "~"
author = "Jesse Bowers"

# Remove existing package
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)) # detach packages to initialize (or restart R)
remove.packages("dependentLCM") # Remove existing package to initialize

# Make Initial Package
setwd(new_package_dir)
Rcpp::Rcpp.package.skeleton(
  name="dependentLCM"
  , code_files=c(r_file_loc)
  , cpp_files = c(cpp_file_loc)
  , author = author
  , example_code = FALSE
  )

# Build Documentation
# [MANUAL] Add "Encoding: UTF-8" to DESCRIPTION file
# No longer needed?: Sys.setenv("PKG_CXXFLAGS"="-std=c++11") # CXX_STD = CXX11
roxygen2::roxygenize("dependentLCM", clean=TRUE)
# [MANUAL] Delete NAMESPACE file
roxygen2::roxygenize("dependentLCM") # Build namespace file
# [OPTIONAL] If issues occur downstream. Delete *.dll and *.o files at this point.

# Install package
devtools::install("dependentLCM")


###################
################### Misc Setup Code
###################


roxygen2::roxygenize("~/dependentLCM", clean=TRUE) # Documentation

rstudioapi::previewRd("~/dependentLCM/man/thisDocumentationFile.Rd") # View formatted documentation file

devtools::build_manual("~/dependentLCM") # pdf

# Useful reference: https://cran.rstudio.com/doc/manuals/r-release/R-exts.html#Using-C_002b_002b11-code

devtools::check("~/dependentLCM") # Any package errors?

invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)) # detach packages to initialize (or restart R)
remove.packages("dependentLCM") # Remove existing package to initialize

###################
################### Gotchyas
###################


Make sure we import Rcpp::evalCpp otherwise you CANNOT load this package.
R: #' @importFrom Rcpp evalCpp
NAMESPACE: importFrom(Rcpp,evalCpp)

