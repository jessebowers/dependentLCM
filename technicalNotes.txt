

###################
################### Action Items
###################


OPEN ITEMS:
 * None

FUTURE ENHANCEMENTS:
 * Make additional version of fix_class_label_switching() which does not require DLCM data structure.
 * Allow warmup without archiving, in R allow multiple chains
 * add to SAVE_ITRS: class_pi=Inf, classes=Inf, domains=Inf (difficult due to downstream changes needed)
 * Incorporate optional checks/consistency checks eg domain size, nclasses, etc
 * post-hoc handle label switching
 * Aggregate X so that we can get counts of duplicates all at once rather than one-at-a-time
 * Maybe remove lchoose from cpp. Not currently in use
 * Use dropItem for faster counting. Tried this in dropItemSpeedup branch but was not faster in practice. There should be an implementation which is faster. One idea is to change domains from a map of domains to a map of pointers to domains. Then in Bayes.domainCounts have an option just to count the empty domains. You would need to create a new map of just the empty domains then proceed as usual (where updating the new map updates the old).
 * Change how warmup is done. Allow us to input an old DLCM into this DLCM (also allow to just work as is)
 * Fix devtools::check() identified issues
   > importFrom("stats", "aggregate", "formula", "median", "na.omit", "quantile", "rmultinom", "runif", "var")
   > importFrom("utils", "tail")
   > Use .data$varname for dplyr
   > CPP: Fix is free text not code as expected at: @examples Suppose we
 * Maybe make 'get pooled domains' an exportable function? Do we care?
 * allow pre-specified structual zeroes. allow prespecified domains (latter is possible already but requires preprocessing)


###################
################### Installing Package
###################


# Directly from GitHub
library(Rcpp)
library(devtools)
devtools::install_github(repo="jessebowers/dependentLCM", ref="main"
                         , auth_token="<NEED IF PRIVATE>"
                         )

# Indirectly from GitHub
# Download files: git clone git@github.com:jessebowers/dependentLCM.git
devtools::install("dependentLCM")


# Use package without installing
library(Rcpp)
library(klaR)
library(abind)
library(dplyr)
package_dir <- "~/dependentLCM"
sourceCpp(paste(package_dir, "src/dependentLCM.cpp", sep="/"))
source(paste(package_dir, "R/dependentLCM.r", sep="/"))


###################
################### Build Package from scratch
###################


# [MANUAL] Set locations of files
r_file_loc <- "~/dependentLCM.r"
cpp_file_loc <- "~/dependentLCM.cpp"
new_package_dir <- "~"
author = "Jesse Bowers"

# Remove existing package
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)) # detach packages to initialize (or restart R)
remove.packages("dependentLCM") # Remove existing package to initialize

# Make Initial Package
setwd(new_package_dir)
Rcpp::Rcpp.package.skeleton(
  name="dependentLCM"
  , code_files=c(r_file_loc)
  , cpp_files = c(cpp_file_loc)
  , author = author
  , example_code = FALSE
  )

# Build Documentation
# [MANUAL] Add "Encoding: UTF-8" to DESCRIPTION file
# No longer needed?: Sys.setenv("PKG_CXXFLAGS"="-std=c++11") # CXX_STD = CXX11
roxygen2::roxygenize("dependentLCM", clean=TRUE)
# [MANUAL] Delete NAMESPACE file
roxygen2::roxygenize("dependentLCM") # Build namespace file
# [OPTIONAL] If issues occur downstream. Delete *.dll and *.o files at this point.

# Install package
devtools::install("dependentLCM")


###################
################### Misc Setup Code
###################


roxygen2::roxygenize("~/dependentLCM", clean=TRUE) # Documentation

rstudioapi::previewRd("~/dependentLCM/man/thisDocumentationFile.Rd") # View formatted documentation file

devtools::build_manual("~/dependentLCM") # pdf

# Useful reference: https://cran.rstudio.com/doc/manuals/r-release/R-exts.html#Using-C_002b_002b11-code

devtools::check("~/dependentLCM") # Any package errors?

invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE)) # detach packages to initialize (or restart R)
remove.packages("dependentLCM") # Remove existing package to initialize

###################
################### Gotchyas
###################


Make sure we import Rcpp::evalCpp otherwise you CANNOT load this package.
R: #' @importFrom Rcpp evalCpp
NAMESPACE: importFrom(Rcpp,evalCpp)

